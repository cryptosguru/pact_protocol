(env-data
{ "admin-keyset": ["admin"]
, "writer-keyset": ["writer"]
, "reader-keyset": ["reader"]
, "consumer-keyset": ["consumer"]
, "sharing-node-1-keyset": ["sharing-node-1"]
, "sharing-node-2-keyset": ["sharing-node-2"]
, "sharing-node-3-keyset": ["sharing-node-3"]
, "sharing-node-fake-keyset": ["sharing-node-fake"]
})

(env-keys ["admin"])

(begin-tx "lockbox.repl - load contracts")
(load "../contracts/fungible-v1.pact")
(load "../contracts/stablecoin-example.pact")
(load "../contracts/finprint-token.pact")
(load "../contracts/finprint.pact")
(load "./constants.pact")
(commit-tx)

(typecheck 'finprint)

; --------------------------------------------------------------------------
; Create and Fund Accounts

(begin-tx)

; The writer, reader, and sharing nodes must have accounts.
; The reader needs funds to open requests.
; The sharing nodes need funds for lockbox deposits.
; The writer needs an account to receive payments.
; `credit` creates an account.

(stablecoin-example.create-account 'writer (read-keyset 'writer-keyset))
(stablecoin-example.create-account 'sharing-node-fake (read-keyset 'sharing-node-fake-keyset))

(test-capability (stablecoin-example.CREDIT 'reader))
(test-capability (stablecoin-example.CREDIT 'consumer))
(test-capability (stablecoin-example.CREDIT 'sharing-node-1))
(test-capability (stablecoin-example.CREDIT 'sharing-node-2))
(test-capability (stablecoin-example.CREDIT 'sharing-node-3))
(stablecoin-example.credit 'reader (read-keyset 'reader-keyset) 10000.0)
(stablecoin-example.credit 'consumer (read-keyset 'consumer-keyset) 10000.0)
(stablecoin-example.credit 'sharing-node-1 (read-keyset 'sharing-node-1-keyset) 100000.0)
(stablecoin-example.credit 'sharing-node-2 (read-keyset 'sharing-node-2-keyset) 100000.0)
(stablecoin-example.credit 'sharing-node-3 (read-keyset 'sharing-node-3-keyset) 100000.0)

(finprint-token.initialize)

(test-capability (finprint-token.CREDIT 'sharing-node-1))
(test-capability (finprint-token.CREDIT 'sharing-node-2))
(test-capability (finprint-token.CREDIT 'sharing-node-3))
(finprint-token.credit 'sharing-node-1 (read-keyset 'sharing-node-1-keyset) 1000000.0)
(finprint-token.credit 'sharing-node-2 (read-keyset 'sharing-node-2-keyset) 1000000.0)
(finprint-token.credit 'sharing-node-3 (read-keyset 'sharing-node-3-keyset) 1000000.0)

; Set up the sharing node stakes.
;; TODO: Should be possible with env-sigs instead of test-capability, but seems to be a Pact bug?
(env-keys ["sharing-node-1"])
(test-capability (finprint-token.TRANSFER 'sharing-node-1 'sharing-node-1-stake 1000000.0))
(finprint.create-stake 'sharing-node-1 'sharing-node-1 'sharing-node-1-stake 1000000.0)
(env-keys ["sharing-node-2"])
(test-capability (finprint-token.TRANSFER 'sharing-node-2 'sharing-node-2-stake 1000000.0))
(finprint.create-stake 'sharing-node-2 'sharing-node-2 'sharing-node-2-stake 1000000.0)
(env-keys ["sharing-node-3"])
(test-capability (finprint-token.TRANSFER 'sharing-node-3 'sharing-node-3-stake 1000000.0))
(finprint.create-stake 'sharing-node-3 'sharing-node-3 'sharing-node-3-stake 1000000.0)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: initialize

(begin-tx)
(use finprint)

(expect-failure
  "#initialize: Non-admin cannot initialize."
  "Keyset failure"
  (initialize)
)

(env-keys ["admin"])

(expect
  "#initialize: Initializes successfully."
  "Initialized."
  (initialize)
)

(commit-tx)

;; ; --------------------------------------------------------------------------
;; ; Unit Tests: finprint.create-lockbox

(begin-tx)
(use finprint)

(expect-failure
  "#create-lockbox: Only writer can create."
  "Keyset failure"
  (create-lockbox
    'lockbox-id-failure-only-writer
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(env-keys ["writer"])

(expect-failure
  "#create-lockbox: Can't create a lockbox with non-positive price."
  "The price must be positive."
  (create-lockbox
    'lockbox-id-failure-zero-price
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    0.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#create-lockbox: Can't create a lockbox with an empty sharing group."
  "The sharing group cannot be empty."
  (create-lockbox
    'lockbox-id-failure-empty-group
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    []
    []
  )
)

(expect-failure
  "#create-lockbox: Can't create a lockbox with a non-existent sharing node account ID."
  "row not found"
  (create-lockbox
    'lockbox-id-failure-bad-node-account
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-nonexistent]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#create-lockbox: Can't create a lockbox with non-unique sharing node account IDs."
  "All sharing nodes must have different accounts."
  (create-lockbox
    'lockbox-id-failure-repeated-node
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-1]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect
  "#create-lockbox: Creates a lockbox and corresponding membership records."
  "Lockbox creation pending."
  (create-lockbox
    'lockbox-id-1
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#create-lockbox: Cannot re-use a lockbox ID."
  "row found"
  (create-lockbox
    'lockbox-id-1
    'v1-failure-repeated-lockbox-id
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#create-lockbox: Cannot re-use a version ID."
  "row found"
  (create-lockbox
    'lockbox-id-failure-repeated-version-id
    'v1
    1
    'writer
    (read-keyset 'consumer-keyset)
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(commit-tx)

;; ; --------------------------------------------------------------------------
;; ; Unit Tests: finprint.acknowledge-share

(begin-tx)
(use finprint)

(expect-failure
  "#acknowledge-share: Only sharing nodes in the group can acknowledge shares."
  "Account is not a member of the lockbox sharing group."
  (acknowledge-share 'lockbox-id-1 'v1 'writer)
)

(env-keys ["sharing-node-1"])
(test-capability (stablecoin-example.TRANSFER 'sharing-node-1 'sharing-ld-1 10000.0))

(expect-failure
  "#acknowledge-share: Nodes can only acknowledge their own shares."
  "Keyset failure"
  (acknowledge-share 'lockbox-id-1 'v1 'sharing-node-2)
)

(expect-failure
  "#acknowledge-share: Cannot acknowledge a share without lockbox deposit."
  "row not found"
  (acknowledge-share 'lockbox-id-1 'v1 'sharing-node-1)
)

(test-capability (stablecoin-example.TRANSFER 'sharing-node-1 'deposit-1 369.0))
(create-lockbox-deposit 'lockbox-id-1 'sharing-node-1 'deposit-1)
(expect
  "#acknowledge-share: Lockbox version does not update without all acks."
  ["Waiting on other acknowledgements." 0 0]
  [
    (acknowledge-share 'lockbox-id-1 'v1 'sharing-node-1)
    (get-sharing-node-membership 'sharing-node-1)
    (get-sharing-node-membership 'sharing-node-2)
  ]
)

(expect
  "#acknowledge-share: Lockbox deposit is transfered on share acknowledge."
  99631.0
  (stablecoin-example.get-balance 'sharing-node-1)
)

(env-keys ["sharing-node-2"])
(test-capability (stablecoin-example.TRANSFER 'sharing-node-2 'deposit-2 10000.0))
(create-lockbox-deposit 'lockbox-id-1 'sharing-node-2 'deposit-2)

(expect
  "#acknowledge-share: Lockbox version updates with all acks."
  ["Lockbox current version updated." 1 1]
  [
    (acknowledge-share 'lockbox-id-1 'v1 'sharing-node-2)
    (get-sharing-node-membership 'sharing-node-1)
    (get-sharing-node-membership 'sharing-node-2)
  ]
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.update-lockbox

(begin-tx)
(use finprint)

(env-keys ["writer"])

(expect-failure
  "update-lockbox: Cannot re-use a version ID."
  "row found"
  (update-lockbox
    'lockbox-id-1
    'v1
    1
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-3]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect
  "#update-lockbox: Updates a lockbox's pending version."
  "Lockbox pending version updated."
  (update-lockbox
    'lockbox-id-1
    'lb1-v2
    1
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-3]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#update-lockbox: Can't update a lockbox with a non-positive price."
  "The price must be positive."
  (update-lockbox
    'lockbox-id-1
    'v1-failure-zero-price
    1
    0.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-2]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#update-lockbox: Can't update a lockbox to have an empty sharing group."
  "The sharing group cannot be empty."
  (update-lockbox
    'lockbox-id-1
    'v1-failure-empty-group
    1
    123.0
    "mock-secret-shares-cid"
    []
    []
  )
)

(expect-failure
  "#update-lockbox: Can't add a sharing node with a non-existent sharing node account ID."
  "row not found"
  (update-lockbox
    'lockbox-id-1
    'v1-failure-bad-node-account
    1
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-nonexistent]
    [constants.share1-hash constants.share2-hash]
  )
)

(expect-failure
  "#update-lockbox: Can't add a sharing node with same account ID."
  "All sharing nodes must have different accounts."
  (update-lockbox
    'lockbox-id-1
    'v1-failure-repeated-node
    1
    123.0
    "mock-secret-shares-cid"
    [constants.sharing-node-1 constants.sharing-node-1]
    [constants.share1-hash constants.share2-hash]
  )
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.update-lockbox-current-version

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(expect
  "#update-lockbox-current-version: Increments lockbox count."
  ["Lockbox current version updated." 1 0 1]
  [
    (update-lockbox-current-version 'lockbox-id-1)
    (get-sharing-node-membership 'sharing-node-1)
    (get-sharing-node-membership 'sharing-node-2)
    (get-sharing-node-membership 'sharing-node-3)
  ]
)

(update-lockbox
  'lockbox-id-1
  'lb1-v3
  1
  123.0
  "mock-secret-shares-cid"
  [constants.sharing-node-1 constants.sharing-node-2]
  [constants.share1-hash constants.share2-hash]
)

(expect
  "#update-lockbox-current-version: Decrements lockbox count."
  ["Lockbox current version updated." 1 1 0]
  [
    (update-lockbox-current-version 'lockbox-id-1)
    (get-sharing-node-membership 'sharing-node-1)
    (get-sharing-node-membership 'sharing-node-2)
    (get-sharing-node-membership 'sharing-node-3)
  ]
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.get-sharing-node-membership

(begin-tx)
(use finprint)

(expect
  "#get-sharing-node-membership: Returns lockbox count."
    1
    (get-sharing-node-membership 'sharing-node-1)
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.get-sharing-node-activity

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(expect
  "#get-sharing-node-activity: Returns lockbox count."
  [(time "0000-01-01T00:00:00Z") (time "0000-01-01T00:00:00Z")]
  [
    (at 'lastRequestOpenedAt (get-sharing-node-activity 'lockbox-id-1 'sharing-node-1))
    (at 'leaveRequestInitiatedAt (get-sharing-node-activity 'lockbox-id-1 'sharing-node-1))
  ]
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.add-reader

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

; writer can't add reader
(expect-failure
  "#add-reader: only consumer can add a reader."
  "Keyset failure"
  (add-reader
    'lockbox-id-1
    'reader
  )
)

(env-keys ["consumer"])

(expect
  "#add-reader: Consumer can add a reader."
  "Reader added."
  (add-reader 'lockbox-id-1 'reader)
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.open-request

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(expect-failure
  "#open-request: Transaction must be signed by the reader."
  "Keyset failure"
  (open-request
    'lockbox-id-1
    'request-id-1
    'reader
    123.0
    "mock-request-public-key"
  )
)

(env-keys ["writer"])
(test-capability (stablecoin-example.TRANSFER 'writer ESCROW_ACCOUNT_ID 123.0))

(expect-failure
  "#open-request: Reader must be authorized by the consumer."
  "Not authorized"
  (open-request
    'lockbox-id-1
    'request-id-1
    'writer
    123.0
    "mock-request-public-key"
  )
)

(env-keys ["reader"])
(test-capability (stablecoin-example.TRANSFER 'reader ESCROW_ACCOUNT_ID 1000.0))

(expect-failure
  "#open-request: Rejects a max price that is too low."
  "The lockbox price is above the specified max price."
  (open-request
    'lockbox-id-1
    'request-id-1
    'reader
    122.0
    "mock-request-public-key"
  )
)

(expect
  "#open-request: Allows an authorized reader to open a request."
  "Request opened."
  (open-request
    'lockbox-id-1
    'request-id-1
    'reader
    123.0
    "mock-request-public-key"
  )
)

(expect
  "#open-request: Allows an authorized reader to open another request."
  "Request opened."
  (open-request
    'lockbox-id-1
    'request-id-2
    'reader
    123.0
    "mock-request-public-key"
  )
)

(env-keys ["consumer"])
(test-capability (stablecoin-example.TRANSFER 'consumer ESCROW_ACCOUNT_ID 1000.0))
(expect
  "#open-request Allows consumer to open request and only pay sharing nodes."
  ["Request opened." 9970.0]
  [
    (open-request
      'lockbox-id-1
      'request-id-3
      'consumer
      123.0
      "mock-request-public-key"
    )
    (stablecoin-example.get-balance 'consumer)
  ]
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.remove-reader

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(env-keys ["writer"])

(expect-failure
  "#remove-reader: only consumer can remove a reader."
  "Keyset failure"
  (remove-reader
    'lockbox-id-1
    'reader
  )
)

(env-keys ["consumer"])

(expect
  "#remove-reader: Consumer can remove a reader."
  "Reader removed."
  (remove-reader 'lockbox-id-1 'reader)
)

(env-keys ["reader"])

(expect-failure
  "#open-request: Rejects a reader whose authorization has been revoked."
  "Not authorized"
  (open-request
    'lockbox-id-1
    'request-id-3
    'reader
    123.0
    "mock-request-public-key"
  )
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: finprint.post-result

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(env-keys ["admin"])

(expect-failure
  "#post-result: Only sharing node can post a result."
  "Keyset failure"
  (post-result
    'request-id-1
    'sharing-node-1
    "ciphertext"
    "mac"
    "nonce"
  )
)

(env-keys ["writer"])

(expect-failure
  "#post-result: Accounts not in the sharing group cannot post a result."
  "Account is not a member of the lockbox sharing group."
  (post-result
    'request-id-1
    'writer
    "ciphertext"
    "mac"
    "nonce"
  )
)

;; TODO: The finprint module should not require managed cap to withdraw from escrow.
(env-keys ["sharing-node-1"])
(test-capability (finprint.WITHDRAW_ESCROW))
(test-capability (stablecoin-example.TRANSFER ESCROW_ACCOUNT_ID 'sharing-node-1 1000.0))

(expect
  "#post-result: Allow sharing node to post a result."
  "Result posted."
  (post-result 'request-id-1 'sharing-node-1 "mock-result-1-1" "mac" "nonce")
)

(env-keys ["sharing-node-2"])
(test-capability (stablecoin-example.TRANSFER ESCROW_ACCOUNT_ID 'sharing-node-2 1000.0))
(test-capability (stablecoin-example.TRANSFER ESCROW_ACCOUNT_ID 'writer 1000.0))

(expect
  "#post-result: Allow other sharing nodes to post a result, filling the request."
  "Result posted."
  (post-result 'request-id-1 'sharing-node-2 "mock-result-1-2" "mac" "nonce")
)

(commit-tx)

; --------------------------------------------------------------------------
; Unit Tests: leaving lockboxes

(begin-tx)
(use finprint)
(test-capability (INTERNAL))

(env-keys ["writer"])
(create-lockbox
  'lockbox-id-leave
  'vLeave
  1
  'writer
  (read-keyset 'consumer-keyset)
  123.0
  "mock-secret-shares-cid"
  [constants.sharing-node-1 constants.sharing-node-2]
  [constants.share1-hash constants.share2-hash]
)
(update-lockbox-current-version 'lockbox-id-leave)
(env-keys ["consumer"])
(add-reader 'lockbox-id-leave 'reader)

(env-keys ["sharing-node-fake"])

(expect-failure
  "#initiate-leave-lockbox: Accounts not in the sharing group cannot submit leave requests."
  (initiate-leave-lockbox 'lockbox-id-leave 'sharing-node-fake)
)

(env-keys ["sharing-node-1"])

(expect-failure
  "#initiate-leave-lockbox: Sharing node cannot submit leave requests for another node."
  "Keyset failure"
  (initiate-leave-lockbox 'lockbox-id-leave 'sharing-node-2)
)

(expect
  "#initiate-leave-lockbox: Sharing node can submit leave request for themself."
  [
    "Leave request initiated."
    (time "1970-01-01T00:00:00Z")
  ]
  [
    (initiate-leave-lockbox 'lockbox-id-leave 'sharing-node-1)
    (at 'leaveRequestInitiatedAt (get-sharing-node-activity 'lockbox-id-leave 'sharing-node-1))
  ]
)

(env-chain-data { "block-time": (time "1970-01-01T00:00:00Z") })
(expect-failure
  "#force-leave-lockbox: Fails if leave response deadline has not been met."
  "Deadline for writer to respond to leave request not yet exceeded."
  (force-leave-lockbox 'lockbox-id-leave 'sharing-node-1)
)

(env-chain-data { "block-time": (time "1971-01-01T00:00:00Z") })
(expect
  "#force-leave-lockbox: Allows sharing node to reset sharing group if deadline exceeded."
  "Sharing group reset."
  (force-leave-lockbox 'lockbox-id-leave 'sharing-node-1)
)

(env-keys ["reader"])
(expect-failure
  "#open-request: Cannot open a request on a lockbox with an empty sharing group."
  "The sharing group is empty."
  (open-request
    'lockbox-id-leave
    'request-id-leave-1
    'reader
    123.0
    "mock-request-public-key"
  )
)

(commit-tx)
